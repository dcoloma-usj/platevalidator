test("Team1 test cases", function (assert) {
    assert.equal(isValidPlate("0000AAA"), false, "TC-Team1-1");
    assert.equal(isValidPlate("0000ABC"), false, "TC-Team1-2");
    assert.equal(isValidPlate("0000BCA"), false, "TC-Team1-3");
    assert.equal(isValidPlate("0000BAC"), false, "TC-Team1-4");
    assert.equal(isValidPlate("0000KQÃ‘"), false, "TC-Team1-5");
    assert.equal(isValidPlate("0000BCD"), true, "TC-Team1-6");
    assert.equal(isValidPlate("0000BC"), false, "TC-Team1-7");
    assert.equal(isValidPlate("0000B"), false, "TC-Team1-8");
    assert.equal(isValidPlate("0000"), false, "TC-Team1-9");
    assert.equal(isValidPlate("000"), false, "TC-Team1-10");
    assert.equal(isValidPlate("00"), false, "TC-Team1-11");
    assert.equal(isValidPlate("0"), false, "TC-Team1-12");
    assert.equal(isValidPlate(""), false, "TC-Team1-13");
    assert.equal(isValidPlate("JHS0000"), false, "TC-Team1-14");
    assert.equal(isValidPlate("0005GPT"), true, "TC-Team1-15");
    assert.equal(isValidPlate("0000LKH"), true, "TC-Team1-16");
    assert.equal(isValidPlate("0000QQQ"), false, "TC-Team1-17");
    assert.equal(isValidPlate("0000QQB"), false, "TC-Team1-18");
    assert.equal(isValidPlate("0000QBC"), false, "TC-Team1-19");
    assert.equal(isValidPlate("0000Ã‘Ã‘Ã‘"), false, "TC-Team1-20");
    assert.equal(isValidPlate("0000Ã‘Ã‘B"), false, "TC-Team1-21");
    assert.equal(isValidPlate("0000Ã‘BC"), false, "TC-Team1-22");
    assert.equal(isValidPlate("0000CR7"), false, "TC-Team1-23");
    assert.equal(isValidPlate("000BXTN"), false, "TC-Team1-24");
    assert.equal(isValidPlate("1917URS"), false, "TC-Team1-25");
    assert.equal(isValidPlate("1939WIN"), false, "TC-Team1-26");
    assert.equal(isValidPlate("0021FTP"), true, "TC-Team1-27");
    assert.equal(isValidPlate("0000DNL"), true, "TC-Team1-28");
    assert.equal(isValidPlate("6666HTL"), true, "TC-Team1-29");
    assert.equal(isValidPlate("A3G5V34"), false, "TC-Team1-30");
    assert.equal(isValidPlate("Daniel,ðŸ¥µ"), false, "TC-Team1-31");
    assert.equal(isValidPlate("A3G~~5V6&&@@@34"), false, "TC-Team1-32");
});

test("Team2", function (assert) {
    assert.equal(isValidPlate("0000AAA"), false, "TC-Team2-01");
    assert.equal(isValidPlate("0000CPN"), true, "TC-Team2-02");
    assert.equal(isValidPlate("0000KDE"), false, "TC-Team2-03");
    assert.equal(isValidPlate("0000GKQ"), false, "TC-Team2-04");
    assert.equal(isValidPlate("000BBB"), false, "TC-Team2-05");
    assert.equal(isValidPlate("0000BCD"), true, "TC-Team2-06");
    assert.equal(isValidPlate("9804RR"), false, "TC-Team2-07");
    assert.equal(isValidPlate("9978ERT"), false, "TC-Team2-08");
    assert.equal(isValidPlate("678IWWW"), false, "TC-Team2-09");
    assert.equal(isValidPlate("66709BG"), false, "TC-Team2-10");
    assert.equal(isValidPlate("BBB1111"), false, "TC-Team2-11");
    assert.equal(isValidPlate("1234567"), false, "TC-Team2-12");
    assert.equal(isValidPlate("MZCVBXN"), false, "TC-Team2-13");
    assert.equal(isValidPlate("1234KLÃ‘"), false, "TC-Team2-14");
    assert.equal(isValidPlate("5768TYT"), true, "TC-Team2-15");
    assert.equal(isValidPlate("66709BG"), false, "TC-Team2-16");
    assert.equal(isValidPlate("1D3T5H5"), false, "TC-Team2-17");    
});

test("Team3", function (assert) {
    assert.equal(isValidPlate("0000AAA"), false, "TC-Team3-01");
    assert.equal(isValidPlate("Z1234AA"), false, "TC-Team3-02");
    assert.equal(isValidPlate("9999ZZZ"), true, "TC-Team3-03");
    assert.equal(isValidPlate("AAA9999"), false, "TC-Team3-04");
    assert.equal(isValidPlate("0000ZZZ"), true, "TC-Team3-05");
    assert.equal(isValidPlate("9999AAA"), false, "TC-Team3-06");
    assert.equal(isValidPlate("ABCD999"), false, "TC-Team3-07");
    assert.equal(isValidPlate("0007AAÃ‘"), false, "TC-Team3-08");
    assert.equal(isValidPlate("999AAAA"), false, "TC-Team3-09");
    assert.equal(isValidPlate("123AAA"), false, "TC-Team3-10");
    assert.equal(isValidPlate("9A9B9C9"), false, "TC-Team3-11");
    assert.equal(isValidPlate("!000AVD"), false, "TC-Team3-13");
    assert.equal(isValidPlate("ABCD!99"), false, "TC-Team3-14");
    assert.equal(isValidPlate("98A98CD"), false, "TC-Team3-15");
    assert.equal(isValidPlate("9999ZZQ"), false, "TC-Team3-16");
});

test("Team4", function (assert) {
    assert.equal(isValidPlate("0000AAA"), false, "TC-Team4-01");
    assert.equal(isValidPlate("0000SSS"), true, "TC-Team4-02");
    assert.equal(isValidPlate("1234BCD"), true, "TC-Team4-03");
    assert.equal(isValidPlate("9876ZXY"), true, "TC-Team4-04");
    assert.equal(isValidPlate("2222LLL"), true, "TC-Team4-05");
    assert.equal(isValidPlate("1111MMM"), true, "TC-Team4-06");
    assert.equal(isValidPlate("19822DJS"), true, "TC-Team4-07");
    assert.equal(isValidPlate("123ABC"), false, "TC-Team4-08");
    assert.equal(isValidPlate("12345678"), false, "TC-Team4-09");
    assert.equal(isValidPlate("1234A"), false, "TC-Team4-10");
    assert.equal(isValidPlate("ABCD123"), false, "TC-Team4-11");
    assert.equal(isValidPlate("1234Ã‘Ã‘Ã‘"), false, "TC-Team4-12");
    assert.equal(isValidPlate("1234AEI"), false, "TC-Team4-13");
    assert.equal(isValidPlate("12 34BC"), false, "TC-Team4-14");
    assert.equal(isValidPlate("13456GHJ"), true, "TC-Team4-15");
    assert.equal(isValidPlate("5678KLM"), true, "TC-Team4-16");
    assert.equal(isValidPlate("2345RTY"), true, "TC-Team4-17");
    assert.equal(isValidPlate("9101NPX"), true, "TC-Team4-18");
    assert.equal(isValidPlate("8765CVB"), true, "TC-Team4-19");
    assert.equal(isValidPlate("0000-AAA"), false, "TC-Team4-20");
    assert.equal(isValidPlate("12A4BCD"), false, "TC-Team4-21");
    assert.equal(isValidPlate("WXYZ123"), false, "TC-Team4-22");
    assert.equal(isValidPlate("0987CBD"), true, "TC-Team4-23");
    assert.equal(isValidPlate("123456A"), false, "TC-Team4-24");
    assert.equal(isValidPlate("A123456"), false, "TC-Team4-25");
    assert.equal(isValidPlate("1234aBC"), false, "TC-Team4-26");
    assert.equal(isValidPlate("1234!@#"), false, "TC-Team4-27");
    assert.equal(isValidPlate("ZZZZ999"), false, "TC-Team4-28");
    assert.equal(isValidPlate("1122TKS"), true, "TC-Team4-29");
});

test("Team5", function (assert) {
    assert.equal(isValidPlate("0000AAA"), false, "TC-Team5-01");
    assert.equal(isValidPlate("1234ABC"), false, "TC-Team5-02");
    assert.equal(isValidPlate("9876XYZ"), true, "TC-Team5-03");
    assert.equal(isValidPlate("0000DEF"), false, "TC-Team5-04");
    assert.equal(isValidPlate("5678GHI"), false, "TC-Team5-05");
    assert.equal(isValidPlate("123ABC"), false, "TC-Team5-06");
    assert.equal(isValidPlate("1234567XYZ"), true, "TC-Team5-07");
    assert.equal(isValidPlate("12A4BCD"), false, "TC-Team5-08");
    assert.equal(isValidPlate("1234AB1"), false, "TC-Team5-09");
    assert.equal(isValidPlate("1234AEI"), false, "TC-Team5-10");
    assert.equal(isValidPlate("1234NÌƒZZ"), false, "TC-Team5-11");
    assert.equal(isValidPlate("1234QWE"), false, "TC-Team5-12");
    assert.equal(isValidPlate("1234abc"), false, "TC-Team5-13");
    assert.equal(isValidPlate("1234$%^&"), false, "TC-Team5-14");
});

test("Team6", function (assert) {
    assert.equal(isValidPlate("0000AAA"), false, "TC-Team6-01");
    assert.equal(isValidPlate("00011QK"), false, "TC-Team6-02");
    assert.equal(isValidPlate("00011QQQ"), false, "TC-Team6-03");
    assert.equal(isValidPlate("CCC0123"), false, "TC-Team6-04");
    assert.equal(isValidPlate("CC0128"), false, "TC-Team6-05");
    assert.equal(isValidPlate("1111AÃ‘A"), false, "TC-Team6-06");
    assert.equal(isValidPlate("1234CBD"), true, "TC-Team6-07");
    assert.equal(isValidPlate("9876GDFS"), true, "TC-Team6-08");
    assert.equal(isValidPlate("4652T5G"), false, "TC-Team6-09");
    assert.equal(isValidPlate("1234567"), false, "TC-Team6-10");
    assert.equal(isValidPlate("BCDFGHK"), false, "TC-Team6-11");
    assert.equal(isValidPlate("1B2CDFG"), false, "TC-Team6-12");
});

test("Team7", function (assert) {
    assert.equal(isValidPlate("0000AAA"), false, "TC-Team7-01");
    assert.equal(isValidPlate("100000G"), false, "TC-Team7-02");
    assert.equal(isValidPlate("ABSBSBD"), false, "TC-Team7-03");
    assert.equal(isValidPlate("1234ABC"), false, "TC-Team7-04");
    assert.equal(isValidPlate("ALAVERGA"), false, "TC-Team7-05");
    assert.equal(isValidPlate("0420AAA"), false, "TC-Team7-06");
    assert.equal(isValidPlate("1234Ã‘QA"), false, "TC-Team7-07");
    assert.equal(isValidPlate("1212AAA"), false, "TC-Team7-08");
    assert.equal(isValidPlate("4543JHY"), true, "TC-Team7-09");
    assert.equal(isValidPlate("1234ASD"), false, "TC-Team7-10");
    assert.equal(isValidPlate("4567SDD"), true, "TC-Team7-11");
    assert.equal(isValidPlate("GFD5432"), false, "TC-Team7-12");
    assert.equal(isValidPlate("DF4G3HD"), false, "TC-Team7-13");
    assert.equal(isValidPlate("H4G5F67"), false, "TC-Team7-14");
    assert.equal(isValidPlate("3456DFG"), true, "TC-Team7-15");
    assert.equal(isValidPlate("345FGHE"), false, "TC-Team7-16");
    assert.equal(isValidPlate("6789HDK"), true, "TC-Team7-17");
    assert.equal(isValidPlate("2345SDF"), true, "TC-Team7-18");
    assert.equal(isValidPlate("1122TKS"), true, "TC-Team7-19");
    assert.equal(isValidPlate("0000AAA"), false, "TC-Team7-20");
    assert.equal(isValidPlate("0000SSS"), true, "TC-Team7-21");
    assert.equal(isValidPlate("1234BCD"), true, "TC-Team7-22");
    assert.equal(isValidPlate("9876ZXY"), true, "TC-Team7-23");
    assert.equal(isValidPlate("2222LLL"), true, "TC-Team7-24");
    assert.equal(isValidPlate("1111MMM"), true, "TC-Team7-25");
    assert.equal(isValidPlate("19822DJS"), true, "TC-Team7-26");
    assert.equal(isValidPlate("123ABC"), false, "TC-Team7-27");
    assert.equal(isValidPlate("12345678"), false, "TC-Team7-28");
    assert.equal(isValidPlate("1234A"), false, "TC-Team7-29");
    assert.equal(isValidPlate("ABCD123"), false, "TC-Team7-30");
    assert.equal(isValidPlate("1234Ã‘Ã‘Ã‘"), false, "TC-Team7-31");
    assert.equal(isValidPlate("1234AEI"), false, "TC-Team7-32");
    assert.equal(isValidPlate("12 34BC"), false, "TC-Team7-33");
    assert.equal(isValidPlate("3456GHJ"), true, "TC-Team7-34");
    assert.equal(isValidPlate("5678KLM"), true, "TC-Team7-35");
    assert.equal(isValidPlate("2345RTY"), true, "TC-Team7-36");
    assert.equal(isValidPlate("9101NPX"), true, "TC-Team7-37");
    assert.equal(isValidPlate("8765CVB"), true, "TC-Team7-38");
    assert.equal(isValidPlate("0000-AAA"), false, "TC-Team7-39");
    assert.equal(isValidPlate("12A4BCD"), false, "TC-Team7-40");
    assert.equal(isValidPlate("WXYZ123"), false, "TC-Team7-41");
    assert.equal(isValidPlate("0987CBD"), true, "TC-Team7-42");
    assert.equal(isValidPlate("123456A"), false, "TC-Team7-43");
    assert.equal(isValidPlate("A123456"), false, "TC-Team7-44");
    assert.equal(isValidPlate("1234aBC"), false, "TC-Team7-45");
    assert.equal(isValidPlate("1234!@#"), false, "TC-Team7-46");
    assert.equal(isValidPlate("ZZZZ999"), false, "TC-Team7-47");
    assert.equal(isValidPlate("1122TKS"), true, "TC-Team7-48");
    assert.equal(isValidPlate("0000AAA"), false, "TC-Team7-49");
    assert.equal(isValidPlate("1234LLL"), true, "TC-Team7-50");
    assert.equal(isValidPlate("8547CFW"), true, "TC-Team7-51");
    assert.equal(isValidPlate("7777Ã‘QO"), false, "TC-Team7-52");
    assert.equal(isValidPlate("1010RRR"), true, "TC-Team7-53");
    assert.equal(isValidPlate("1225AAA"), false, "TC-Team7-54");
    assert.equal(isValidPlate("4444KMS"), true, "TC-Team7-55");
    assert.equal(isValidPlate("0000PUM"), false, "TC-Team7-56");
    assert.equal(isValidPlate("4444444"), false, "TC-Team7-57");
    assert.equal(isValidPlate("TUMADRE"), false, "TC-Team7-58");
    assert.equal(isValidPlate("MALO456"), false, "TC-Team7-59");
    assert.equal(isValidPlate("0657VDS"), true, "TC-Team7-60");
    assert.equal(isValidPlate("1R245B4"), false, "TC-Team7-61");
    assert.equal(isValidPlate("WWW4571"), false, "TC-Team7-62");
    assert.equal(isValidPlate("2201TFR"), true, "TC-Team7-63");
    assert.equal(isValidPlate("3333ABC"), false, "TC-Team7-64");
    assert.equal(isValidPlate("1111LPK"), true, "TC-Team7-65");
    assert.equal(isValidPlate("6969NCS"), true, "TC-Team7-66");
    assert.equal(isValidPlate("7777DBS"), true, "TC-Team7-67");
    assert.equal(isValidPlate("2290DBZ"), true, "TC-Team7-68");
    assert.equal(isValidPlate("222DBGT"), false, "TC-Team7-69");
    assert.equal(isValidPlate("0000MAC"), false, "TC-Team7-70");
});

test("Team8", function (assert) {
    assert.equal(isValidPlate("0000AAA"), false, "TC-Team8-01");
    assert.equal(isValidPlate("1234LLL"), true, "TC-Team8-02");
    assert.equal(isValidPlate("8547CFW"), true, "TC-Team8-03");
    assert.equal(isValidPlate("7777Ã‘QO"), false, "TC-Team8-04");
    assert.equal(isValidPlate("1010RRR"), true, "TC-Team8-05"); 
    assert.equal(isValidPlate("1225AAA"), false, "TC-Team8-06");
    assert.equal(isValidPlate("4444KMS"), true, "TC-Team8-07");
    assert.equal(isValidPlate("0000PUM"), false, "TC-Team8-08");
    assert.equal(isValidPlate("4444444"), false, "TC-Team8-09");
    assert.equal(isValidPlate("TUMADRE"), false, "TC-Team8-10");
    assert.equal(isValidPlate("MALO456"), false, "TC-Team8-11");
    assert.equal(isValidPlate("0657VDS"), true, "TC-Team8-12");
    assert.equal(isValidPlate("1R245B4"), false, "TC-Team8-13");
    assert.equal(isValidPlate("WWW4571"), false, "TC-Team8-14");
    assert.equal(isValidPlate("2201TFR"), true, "TC-Team8-15");
    assert.equal(isValidPlate("3333ABC"), false, "TC-Team8-16");
    assert.equal(isValidPlate("1111LPK"), true, "TC-Team8-17");
    assert.equal(isValidPlate("6969NCS"), true, "TC-Team8-18");
    assert.equal(isValidPlate("7777DBS"), true, "TC-Team8-19");
    assert.equal(isValidPlate("2290DBZ"), true, "TC-Team8-20");
    assert.equal(isValidPlate("222DBGT"), false, "TC-Team8-21");
    assert.equal(isValidPlate("0000MAC"), false, "TC-Team8-22");
});

test("Team0", function (assert) {
    assert.equal(isValidPlate("0000BBB"), true, "TC-OK-1");
    assert.equal(isValidPlate("1234CDF"), true, "TC-OK-2");
    assert.equal(isValidPlate("5678GHJ"), true, "TC-OK-3");
    assert.equal(isValidPlate("9871KLM"), true, "TC-OK-4");
    assert.equal(isValidPlate("3421NPR"), true, "TC-OK-5");
    assert.equal(isValidPlate("4398STV"), true, "TC-OK-6");
    assert.equal(isValidPlate("8657WXY"), true, "TC-OK-7");
    assert.equal(isValidPlate("9999ZZZ"), true, "TC-OK-8");
    assert.equal(isValidPlate("0000bbb"), true, "TC-OK-9");
    assert.equal(isValidPlate("4321fcd"), true, "TC-OK-10");
    assert.equal(isValidPlate("5876jkl"), true, "TC-OK-11");
    assert.equal(isValidPlate("9187mgh"), true, "TC-OK-12");
    assert.equal(isValidPlate("9831nvt"), true, "TC-OK-13");
    assert.equal(isValidPlate("5676prs"), true, "TC-OK-14");
    assert.equal(isValidPlate("5566ywx"), true, "TC-OK-15");
    assert.equal(isValidPlate("9999zzz"), true, "TC-OK-16");
    assert.equal(isValidPlate("Z050BCD"), false, "TC-NOK-LETTERS-FIRST-4-1");
    assert.equal(isValidPlate("0B07BFG"), false, "TC-NOK-LETTERS-FIRST-4-2");
    assert.equal(isValidPlate("10C0ZDC"), false, "TC-NOK-LETTERS-FIRST-4-3");
    assert.equal(isValidPlate("200GMNP"), false, "TC-NOK-LETTERS-FIRST-4-4");
    assert.equal(isValidPlate("$022ZYW"), false, "TC-NOK-WRONGCHAR-FIRST-4-1");
    assert.equal(isValidPlate("1.00BTS"), false, "TC-NOK-WRONGCHAR-FIRST-4-2");
    assert.equal(isValidPlate("36-6CDN"), false, "TC-NOK-WRONGCHAR-FIRST-4-3");
    assert.equal(isValidPlate("897&MPR"), false, "TC-NOK-WRONGCHAR-FIRST-4-4");
    assert.equal(isValidPlate("0562BÃ‘C"), false, "TC-NOK-WRONGLETTER-LAST-3-1");
    assert.equal(isValidPlate("0235BBQ"), false, "TC-NOK-WRONGLETTER-LAST-3-2");
    assert.equal(isValidPlate("7463ABC"), false, "TC-NOK-WRONGLETTER-LAST-3-3");
    assert.equal(isValidPlate("6713DEC"), false, "TC-NOK-WRONGLETTER-LAST-3-4");
    assert.equal(isValidPlate("2598PSI"), false, "TC-NOK-WRONGLETTER-LAST-3-5");
    assert.equal(isValidPlate("2233ROT"), false, "TC-NOK-WRONGLETTER-LAST-3-6");
    assert.equal(isValidPlate("5235UFG"), false, "TC-NOK-WRONGLETTER-LAST-3-7");
    assert.equal(isValidPlate("37459BB"), false, "TC-NOK-NUMBER-LAST-3-1");
    assert.equal(isValidPlate("8274D3F"), false, "TC-NOK-NUMBER-LAST-3-2");
    assert.equal(isValidPlate("0976HJ2"), false, "TC-NOK-NUMBER-LAST-3-3");
    assert.equal(isValidPlate("0000Z.W"), false, "TC-NOK-WRONGCHAR-LAST-3-1");
    assert.equal(isValidPlate("0000%DW"), false, "TC-NOK-WRONGCHAR-LAST-3-2");
    assert.equal(isValidPlate("0000PP&"), false, "TC-NOK-WRONGCHAR-LAST-3-3");
});